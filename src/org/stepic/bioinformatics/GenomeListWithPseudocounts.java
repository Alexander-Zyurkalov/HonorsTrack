package org.stepic.bioinformatics;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Map;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import static org.stepic.bioinformatics.Probability.*;

public class GenomeListWithPseudocounts extends GenomeList {

    public GenomeListWithPseudocounts newGenomeList(){
        return new GenomeListWithPseudocounts();
    }
    public GenomeListWithPseudocounts newGenomeList(final String... texts){
        return new GenomeListWithPseudocounts(texts);
    }
    public GenomeListWithPseudocounts newGenomeList(FuzzyGenome genome){
        return new GenomeListWithPseudocounts(genome);
    }
    public GenomeListWithPseudocounts(final String... texts){
        super(texts);
    }
    public GenomeListWithPseudocounts(FuzzyGenome genome){
        super(genome);
    }
    public GenomeListWithPseudocounts(){
        super();
    }
    @Override
    Stream<Map<Character, Long>> countMotifsToStream() {
        return super.countMotifsToStream()
                .map((Map<Character,Long> map) ->{
                    for (char key :
                            new char[]{'A', 'C', 'G', 'T'}) {
                        map.put(key, map.getOrDefault(key, (long)0) + 1);
                    }
                    return map;
                });
    }

    @VisibleForTesting
    GenomeListWithPseudocounts getRandomMotifs(int k){
        var random = new SecureRandom();
        return this.stream()
                .map( dna ->
                        new FuzzyGenome(dna,
                            random.nextInt(dna.length() - k + 1 ),
                            k)
                )
                .collect(GenomeListWithPseudocounts::new,
                        GenomeListWithPseudocounts::add,
                        GenomeListWithPseudocounts::addAll);
    }

    @VisibleForTesting
    GenomeListWithPseudocounts getMotifsFromProfile(ProfileList profile) {
        var k = profile.size();
        return this.stream()
                .map( str -> str.profileMostProrableKmer(k,profile) )
                .map(seq -> new FuzzyGenome(seq,0,seq.length()))
                .collect(GenomeListWithPseudocounts::new,
                        GenomeListWithPseudocounts::add,
                        GenomeListWithPseudocounts::addAll);
    }
    public GenomeListWithPseudocounts randomizedMotifSearch(int k, int howManyTimes) {
        return Stream.iterate(
                0,
                i->i+1).limit(howManyTimes)
            .parallel()
            .map(i -> this.randomizedMotifSearch(k))
            .min(Comparator.comparingInt(GenomeListWithPseudocounts::score)).get();
    }
    public GenomeListWithPseudocounts randomizedMotifSearch(int k) {
        var motifs = this.getRandomMotifs(k);
        var bestMotifs = motifs;
        while (true) {
            motifs = this.getMotifsFromProfile(motifs.computeProfile());
            if (motifs.score() < bestMotifs.score()) {
                bestMotifs = motifs;
            } else {
                return bestMotifs;
            }
        }

    }

    public GenomeListWithPseudocounts gibblsSampler(int k, int n,int howManyTimes) {
        return Stream.iterate(
                0,
                i->i+1).limit(howManyTimes)
                .parallel()
                .map(i -> this.gibblsSampler(k,n))
                .min(Comparator.comparingInt(GenomeListWithPseudocounts::score)).get();
    }

    public GenomeListWithPseudocounts gibblsSamplerWhile(int k, int n, int score) {
        return Stream.iterate(
                0,
                i->i+1)
                .parallel()
                .map(i -> this.gibblsSampler(k,n))
                .filter(a -> a.score() <= score)
                .findFirst()
                .get() ;
    }

    private GenomeListWithPseudocounts gibblsSampler(int k, int n) {
        var rnd = new Random();
        var motifs = this.getRandomMotifs(k);
        var bestMotifs = motifs;
        for (int i = 0; i < n; i++) {
            var rndIndex = rnd.nextInt(motifs.size());
            var alteredMotifs = motifs.getMotifWithoutStr(rndIndex);
            var alteredMotifsProfile = alteredMotifs.computeProfile();

            var deletedStr = this.get(rndIndex);
            double[] probabilityVector = deletedStr.getProbabilityVector(k, alteredMotifsProfile);
            int rndKmerIndex = Probability.getRandomIndex(probabilityVector);
            alteredMotifs.add(rndIndex,new FuzzyGenome(deletedStr,rndKmerIndex,k));
//            motifs = alteredMotifs;

            if (alteredMotifs.score() < bestMotifs.score()){
                motifs = alteredMotifs;
                bestMotifs = motifs;
            }
        }
        return bestMotifs;
    }

    @VisibleForTesting
    GenomeListWithPseudocounts getMotifWithoutStr(int i) {
        return Stream.iterate(0, j->j+1).limit(this.size())
                .filter( j -> j != i  )
                .map(j -> this.get(j))
                .collect(GenomeListWithPseudocounts::new,
                         GenomeListWithPseudocounts::add,
                         GenomeListWithPseudocounts::addAll);
    }

    public static void main(String[] args) {
        var list = new GenomeListWithPseudocounts(
                ("CCTGAGCACCCGTGCGTGTCGACACACACACTCGGAGGGGGATGATGAGGTAGAAGGTGACCGCGTTATGGGAAATAAGAGCGTCTATCAGGTCAAGTCACACGCATGCTCGCCAGTGTCGTATTGTTCTGTAAGGATCGCCCACACCGACGGGACGTCTAGCCCACTCCACGATCTCAAATCACGAGGCTAGGTTATATGTGAGGTCATTATACTCGATTGTCATTAGCGACTCTTGCAAGTCTGTGACCGGGTCGCAGTCTCTCGAGAGGACCCGCATGGCGTACTCCTGAAATGAGATGGACTCTGGCTTGCGCCTGAGCACCCGTGC\n" +
                        "GTGTCGACACACACACTCGGAGGGGGATGATGAGGTAGAAGGTGACCGCGTTATGGGAAATAAGAGCGTCTATCAGGTCAAGTCACACGCATGCTCGCCAGTGTCGTATTGTTCTGTAAGGATCGCCCACACCGACGGGACGTCTAGCCCACTCCACGATCTCAAATCACGAGGCTAGGTTATATGTGACTCAGTACTCAGAGAGGTCATTATACTCGATTGTCATTAGCGACTCTTGCAAGTCTGTGACCGGGTCGCAGTCTCTCGAGAGGACCCGCATGGCGTACTCCTGAAATGAGATGGACTCTGGCTTGCGCCTGAGCACCCGTGC\n" +
                        "GACTCCTAGCCTGACTAGAACTACCGCCGTTGTTGGAGGGCGTAGTACGTCCTAAGAGTCGTACTCAAAAAGCCTAGAGACACGTTTTTGCTCGGACGCGGTATAAATCTTCGGACGACATGATCTCTCGACAAAAAAGATCACTCAGACGCCCGCTGTCTGATCCATCGGCACAGCAGGAGGTTCGGATCAGATAGATGGTCGCACCGTAGAGCTCGAGTTACCTGTGCTTGGATGTCCATAAGGTCGGCGTGCCCATTTTCTGAAATTGTTGGGGATAGTGTATGCTACGGGACCTCTTATTTATACTCAGAAAGCACGTATACAAAAG\n" +
                        "TCGTGCTCATAAGTCCTCCAATGCTCGAGTGTCTTGTAATGCCCTGGCATAGAAAACATAACTAATCTAATTTGTACCAGATCCCGGGTTGCACGACTGTCTCGGGTGTGGTACGCGTCCTTCCCTTCAGATACAGTTGCGGTACGTCTGAGCTCGAAAGGTTAAGGGAAGTGTACCCCGGAATTAGCCCCCAAAAGGGCCAGGATCAATTATATATTGAATATTGTCTCGGGGCGAACCCGGCCATTATTAGAGAGTCGAGCGATGATACGAGATACTCAGAGCATCTGGTGCCGTTAGGGATACCAGGACACTGAACGTCTCTTTATAA\n" +
                        "GATATTTAGAGTAGGGATCACCTACTACTCGGGCGTTGACCTGAGTGTTCGCCTGTGCCTCCGAAATGACCTAGCCGTATATTAATCCGGGTTAAGTTGCGTCAGAGTTTCGAGCGATCTGGTAGCACCCCTTGCACAAATGGTCAGTAGTAGCCCACGGAGCCCTTTCCAAGGACCGCACTTTATACCACGAGGATGACGTGGTTGCCAGCTCGGATGTACGCTAATGATCGGTACTGAAAGGGTTTGAATATGTTACTGCCGGTGCGGTTGGCGGAATGTCAGCTAATGACGCGCCGGGCCCGATGCAATTGTGCTGAATCAAGCCCCC\n" +
                        "ATGAGTACATCCTTATTAGTATAAGTGAATCTACTGCAGCTCGAACGTGACTACATTCTACGGGACCCGGCAGGATCACTTGGATATCTCTGACCTCAGTTTGACATTGCTCCGCATAACCCGAGTCTCACGGGTAATAAACTCGCATTCGTGCTACTGTTACAACGTGGCAGAAGGGTGAGCGCCAGTTTGGAAATCATCTAAGTCGCGCCCTGTTATCTTTAATCCTGGTGCGATGCATGCGAGTTGGCGACCCGCACTTTATACTGGCAGTTCGTATGATTTCTCCCGCCAAGTGATGCCAACCGGTCTCGTCTCTTGATGGCACATA\n" +
                        "GTGAGAAGCCGGTCAGGATGTAGGGTGAAGAATTTATTTAGTGCCATCCTTTCACCCCACCACAGAAAAGTCTCACCCATGATGATCCTTATTCTGGGCCATAGCCTCTGCTCGTGCCGAATATCCTCTTGTCGTAAGCCAGAGCTGGACGCTGACAGCTCAATTGAACCTAAGCGGGCCTGTTTGAGAGCTATTCAGACAAATTTGTCGCATGATGATCTCCACTGATATATGGTTCTGATAGGCGTTCAGTATAAGTCTGAGATCGCGCTTGCACGCTCCAGTTTAGCAGCGAACGAGCTTCCATAATATACTCAGAGGGTGGTTCGTA\n" +
                        "CTTATGACCCCACAACTGTGGCTAGACTTACTTTATACTCAAGACCCAGACATCTCATCCGAGATAATGGGCTGCACCTGCCCAGTACTCGTGGCAATCTATGATCTGATTTTGGACGATCGGGCATGGCGAGGCCGAAGCGAGTGGCGGGCGTCGCCAACTAACGAATAATCGGACCGGCAGGTCGAACGAGTAACAAAAGTCATTCGGGCGCCAACTGAAGAGCGTAACCACTCTCCTATCGATCGCTTCCGAAGAAGGATACAGCCCAAGGCGTGTGCGTAAGGACATCCACCATTCGTGAAACTGGGGTGCCAAGAGCGATACGAAA\n" +
                        "AGCCCAACAAGCTCAGATTATCGGGCTTTCCGGCACTGGGTATTCCTGGGGCTCGAGCCTATGAATATGACCTGGGCCCGTTACACTGCGAGAATTAAACTGAGTGTTTTTTGAGCTGACGGGTGCTCTGCGTTCTGGAGCATGGGCAGCGCGCGACTTTGGGCTCAGAGCATGCTCCTCTCTACAATTAATACCAGTTAGTGCGAAAGAGACCGGCCACATCCGAGACCGGTGCTTCCACAAGCCTGCTTTTAAACCATCATTTAGACAAAGGCGCCCTGGTGGGGTGTTAAACCCACAACCGGAAACGATACGTTTAGATGTTCGGACT\n" +
                        "GGAGCCATTTGGCAATCTGGCGCATTCGAGCCGATTCCTGAGAAACATCGATGTAATGTAGCAGCCATACGGGGAAGCGGTGCATCCTGAGAAATGTACACTGGCAAAGTGTTGTATGTCTAAGTGACCACTTTATATCGAGAGCCGCCGGGCGGTGATATGCTTACTATTCGGTTCACTAAACGGGGGTCTGTTAAGCCCTCTATCTAGATTGGCGCCCCGACAAAATTGTGTTTTTAATGTATTTTGCCTCGTTACTCTAGTGTTGCGAAAACCCTTTCCCTACGCGAACAGTTATCTACAAGGATGCTTGGGTATCAAAGGTTGTTCA\n" +
                        "ATAAATATCCGGACCAAGCCTACTCGACACGTCAGCAGCCTCCTATTGTCCTGAAATTAGAGTAGATCCGGAGTCAGAAGAAACGCTCGACGGCTGTGAACGTTTCTAAGTGGTGCCCGCAAACAATATCTTTATACTCAGCCCGTAGAGGAGCGGCGTGCGAGGGTCTGCATGGACGAAAGCCAGAATTGGTAATGTGGAGGGCTTTACGTGCGGCACTTCGAACAATGGTACGTAAACTTCAAGGGGTCCGACATTTAGCTGGCACTTCTTGAAATCGTGTCCGCCAATTAAGAGTGTCAGTATTCTGCGGATGGGTGCGATGGAGGCC\n" +
                        "GCAAGCGTCGCAGCTATCTAGAAGAGCTTGCCCCGTACTCAAAGCAGATCACAGCCCCCCTATGGATTTACAAACGTTTTATATCCTTCCGCTCCCGTCGGGCAGTTGAAAGGGTGAGGTCTACGGATTATATTCACCGCATAGACCAGAAACTAACAACTGTATCAAGTTGGTGCGAAGGCGGATGTCTTTGCTAACAGCTGTGGCTCTGCCGGCAGCCTCTTGAAGAGGGTCGAACATTATCCTATGCACTTTAGGGTCAGAGACCATGTGAAACTGTCGTCTTCGAGGACCCTCTTAGCTTTATAAGCTTTCGTTGTGCTTTAGCTAT\n" +
                        "AAACAACGCGATCATTGGAAAGTTGGCACTTTTAAGACTTGGGCAGTGGTGGTGTATGACGCATCCTCACCAAGTAGCATCGCGAGCGTACGCGCCAGTCTTACTCGTCATACTTCAGCCTCGTGGTTGTGTAACTTTAATGTCAGAGGGCAGAGCAAGTTCGAATATTGCTCCCTTACCGATAGCAAGAAATTAGAAACTTGCACCGGGAACATGTCTATAACCTCGCATTACTGACGACATAAATGGTTAACTGCAGTATGAATTACGTCGGCAAAACAGCGGGATTATACTGGACCTGCTGTAGTCTCTATCTAATCTCGTACTTGAC\n" +
                        "ACAGGTCTAGACTTTCACCTCAGAGCGCGCTTGTGGCGGGAAGTACTGTAGGGAGTTGCACCGTAGCCTCCCCTGCTGACAGCTTAATAGTGGACGGATTTCGCAGGTTGTGACGTCACCCATGTTCTGCTCTTATCGTTTGAAACTTGGCTTGCAGACTACCGGCGCGCACCAGATGAGTGAACACCCTGAAAAAACTTCGGGCTAAAACTCACTCATTAGGAACTCTGGTCGACTATGCGATGTAGGGCTGGTCGAGATTGCCGAGCCGGACGTCACTCTAAGCGGTGGGTCATACTGGATAGGGTGCATTAATGGCTCAAAGAATTAA\n" +
                        "GATTACCATCTTTGCCTCGGTGTACGTTTACCGTGAGTTGCGCTTATACACGTCTAATGACAGCCAGGCTAGGTGACGGTTCGCCTCGTGCGAATACCCCATCGTGCAGACGGCGGCTTTCGAGTCAGCCGGCGTGGGTCAGACTACTTGGCACTCAGAGAAAGTTCATACTTAAAACTGTTCGGACACAATATTGAAAGCGAAGCGACCGTCGCGGGGTCGTGTACGTACAGTGACGCCTTGGCTAATTTTGGTATCCGACACCGTTACATTGGGGACGCCGGACCAGACTCGCTAGTTCGTTAAGTGCGCTACCGGACCAGTGGACTCA\n" +
                        "TATCGCGCGTATATGAAGCGCTATACTACTTTATACTCGCCGTCTTTGAGTATACCTGATAGCGGCCGGTCTATCGTTCTGCTTCCTTGAATGCAAGAACGGTTAGAACCCAGTCTAATGCCCGCCTCGGCTTGTATGACTTAGCATGCCTAAGTGAGAGACCCCAACATACTAATTGCGCGTTGATATCAGGCGCTCTACATACGGTATTATATCTAATGGGATTGGTCTATTATGTTGCACAATATGACATAATGGTCGGTAGACCTAGAGGTTGACGGCCGGTCCCTTTACTTACGCAGAGTTTTGTGTAGTACGGCACGCGTAGTGT\n" +
                        "TCCCTCCCTATTTGTCTGTTAAGCGGGGGGGATCAGCGACCCCGGCTGTACGACGAAAGGTGTTCACGCGAGCTTCCAATTATTGAACCCTGGCATCACGCGGTACCCTAGGCACCAGGCTGAATCTCGACTCGTGTGACAACGTTCGTTTAAATCCCCGTAGATACGGCTGTCTAATCCCTGCCGTCAAGTGGGCGCGATACTCGGACCGAGTCGTATCAATCGCGGACTTTCGCCCCTCCGGACCAAGCGGGTGATTCAAGAACTATTTTTCTGCAAAGCCAGCTGACTTTGCATTCACCTACGGGGTTAAGTACTAACTACTCAGAGT\n" +
                        "GTAACCATCACCTATGAAGAGAGTCTTATCGATACTGGCTTGGCGAGCGAATTCACGTGCACTCGACAGAATCCCTATACATTTATCTGCAATTATACTCAGAGGCGGCACTGGTGATTAGTGTAGACGAAACAATTGACTCAACACTTAACTGACCGGAAACCCTGGCGTGATACCGTTCATAACCTGACCCTCCAAGCTGATAAACGACTACACAACCGCATCCACGGCCGGCCTGGGTTTTGTGACCCTACATCCCGATACGCGATCACGTGTTAAACTGCTGGCTATAACTCTCTGGAAGGCCTGTGCGTGTAATCTCGCCAGGGGA\n" +
                        "TGGTTAGACGTCCTCATACGGATATCTCCAGGCGCCTCAATACGCCCATAGGGGTGATAACGGTCTGACTTCTAACTCAGAGCGGGTCCTTGGAAGTAAATGAGGGGCTTTCAAACTGAGAGCGGGCTTCAAGTTACTATCCTTCTCCCCGGGAGCCTAGTCTTGCGGGATATCTTGCCTGAGTCATAGTTATCAACGTTTTGCGAAAACAGTTAACCGTAGCCAGCGCTTAGTCCATCTGAACTGACAATCAATCTGACCTTCGTTTCTTTCGTAAATAGGTTATCGATGCTTCCTTTAATTTGGGTCCTTCTTCACTGTGCGCAACCAA\n" +
                        "GACGTTACTATACTAGATTTGAGACCTTTGGGGTCTACACGGGGCGCTCGCGGGACTGAAACGACAACCGTTAAAGATGGCACAGATTCGACTTGATGGGGTCTTCCTACAGTGTTCCGCACAGCTGCAAGAAGTTGCTCAGCCGGTCTTTTAGAATTACTTTATTGCTTCTTAGTCTAACATTCTAAAGGTAGCATCTTCCTCACCATTGGGTTAGAGTTTCCCTATAGCTGGTTGTCATAACTTCCAAGAAAGGTACGTGTCGCTGCAATAGAGTCATCAGGCGTGTTTTATATCTGAAGACTTTATGAGCAGAGCCGGGTTGGGAGTA").split("\n")
        );
        var result = list.gibblsSampler(15,2000,200);//.stream().map(FuzzyGenome::getText);//.sorted().collect(Collectors.toList());
        result.forEach(
                g -> System.out.println(g)
        );
        System.out.println();
        System.out.println(result.score());
        System.out.println();

        var expectedMotifs = new GenomeListWithPseudocounts(
                ("TCATTATACTCGATT\n" +
                        "ACTCAGTACTCAGAG\n" +
                        "TATTTATACTCAGAA\n" +
                        "ACGAGATACTCAGAG\n" +
                        "ACTTTATACCACGAG\n" +
                        "ACTTTATACTGGCAG\n" +
                        "ATAATATACTCAGAG\n" +
                        "ACTTTATACTCAAGA\n" +
                        "ACTTTGGGCTCAGAG\n" +
                        "ACTTTATATCGAGAG\n" +
                        "TCTTTATACTCAGCC\n" +
                        "ACTTTAGGGTCAGAG\n" +
                        "ACTTTAATGTCAGAG\n" +
                        "ACTTTCACCTCAGAG\n" +
                        "ACTTGGCACTCAGAG\n" +
                        "ACTTTATACTCGCCG\n" +
                        "ACTAACTACTCAGAG\n" +
                        "CAATTATACTCAGAG\n" +
                        "ACTTCTAACTCAGAG\n" +
                        "ACTTTATGAGCAGAG").split("\n"));

        System.out.println(expectedMotifs.score());
    }
}
